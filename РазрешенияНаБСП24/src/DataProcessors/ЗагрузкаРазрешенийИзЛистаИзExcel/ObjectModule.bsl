
Процедура ЗагрузитьРазрешения(ФайлEXCEL, НомерЛиста) Экспорт

	ТаблицаРазрешений = ЗагрузитьМетодом_MSEXCEL(ФайлEXCEL, НомерЛиста);
	
	Если ТаблицаРазрешений.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	КолонкаRegistarionDate			= "Колонка_1";
	КолонкаSenderCRO				= "Колонка_2";
	КолонкаReceiverLAB				= "Колонка_3";
	КолонкаPermitNr					= "Колонка_4";
	КолонкаRegisatrationLetterNr 	= "Колонка_5";
	КолонкаIssued 					= "Колонка_6";
	КолонкаValid					= "Колонка_7";
	КолонкаTrialPermit				= "Колонка_8";
	КолонкаIssued2					= "Колонка_9";
	КолонкаStudyNumber				= "Колонка_10";
	КолонкаТип						= "Колонка_11";
	КолонкаГорода					= "Колонка_12";
	КолонкаRequesters				= "Колонка_13";
	КолонкаComments					= "Колонка_14";
	
	Для каждого СтрокаТаблицы Из ТаблицаРазрешений Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы[КолонкаRegistarionDate])  
			И ЗначениеЗаполнено(СтрокаТаблицы[КолонкаPermitNr])   
			И ЗначениеЗаполнено(СтрокаТаблицы[КолонкаRegisatrationLetterNr])  Тогда
			
			НовыйДокумент = Документы.Разрешения.СоздатьДокумент();
			НовыйДокумент.Дата 					= СтрокаТаблицы[КолонкаRegistarionDate];
			НовыйДокумент.SenderCRO 			= СтрокаТаблицы[КолонкаSenderCRO];
			НовыйДокумент.ReceiverLAB 			= СтрокаТаблицы[КолонкаReceiverLAB];
			НовыйДокумент.Номер 				= СтрокаТаблицы[КолонкаPermitNr];
			НовыйДокумент.RegisatrationLetterNr = СтрокаТаблицы[КолонкаRegisatrationLetterNr];
			НовыйДокумент.Issued 				= СтрокаТаблицы[КолонкаIssued];
			НовыйДокумент.Valid 				= СтрокаТаблицы[КолонкаValid];
			НовыйДокумент.TrialPermit 			= СтрокаТаблицы[КолонкаTrialPermit];
			НовыйДокумент.Issued2 				= СтрокаТаблицы[КолонкаIssued2];
			//НовыйДокумент.УдалитьStudyNumber 	= СтрокаТаблицы[КолонкаStudyNumber];
			НовыйДокумент.Requesters 			= СтрокаТаблицы[КолонкаRequesters];
			НовыйДокумент.Comments 				= СтрокаТаблицы[КолонкаComments];
			
			Если Найти(СтрокаТаблицы[КолонкаТип], "ambient") > 0 Тогда
				НовыйДокумент.Ambient 		= Истина;
			КонецЕсли; 
			Если Найти(СтрокаТаблицы[КолонкаТип], "frozen") > 0 Тогда
				НовыйДокумент.Frozen 		= Истина;
			КонецЕсли; 
			Если Найти(СтрокаТаблицы[КолонкаТип], "chilled") > 0 Тогда
				НовыйДокумент.Chilled 		= Истина;
			КонецЕсли; 
			
			МассивГородов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы[КолонкаГорода], ",",, Истина);
			
			Для каждого СтрокаГород Из МассивГородов Цикл
				
				НайденныйГород = Справочники.Города.НайтиПоНаименованию(СтрокаГород);
				Если НайденныйГород = ПредопределенноеЗначение("Справочник.Города.ПустаяСсылка") Тогда
					НовыйГород = Справочники.Города.СоздатьЭлемент();
					НовыйГород.Наименование = СтрокаГород;
					НовыйГород.Записать();  
					Город = НовыйГород.Ссылка;
				Иначе
					Город = НайденныйГород.Ссылка;
				КонецЕсли; 
				
				НовыяСтрокаГород = НовыйДокумент.Города.Добавить();
				НовыяСтрокаГород.Город = Город;
			
			КонецЦикла; 
			
			Попытка
				НовыйДокумент.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // ЗагрузитьРазрешения()

Процедура ЗагрузитьОстаткиОбразцов(ФайлEXCEL, НомерЛиста) Экспорт

	ТаблицаРезультат = ЗагрузитьМетодом_MSEXCEL(ФайлEXCEL, НомерЛиста);
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	ТаблицаОстатковОбразцов = Новый ТаблицаЗначений;
	ТаблицаОстатковОбразцов.Колонки.Добавить("Колонка_1", Новый ОписаниеТипов("Число"));
	ТаблицаОстатковОбразцов.Колонки.Добавить("Колонка_2", Новый ОписаниеТипов("Число"));
	ТаблицаОстатковОбразцов.Колонки.Добавить("Колонка_3", Новый ОписаниеТипов("Строка"));
	ТаблицаОстатковОбразцов.Колонки.Добавить("Колонка_4", Новый ОписаниеТипов("Число"));
	ТаблицаОстатковОбразцов.Колонки.Добавить("Колонка_5", Новый ОписаниеТипов("Число"));
	ТаблицаОстатковОбразцов.Колонки.Добавить("Колонка_6", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаОстаток Из ТаблицаРезультат Цикл
	    НоваяСтрокаОстаток = ТаблицаОстатковОбразцов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОстаток, СтрокаОстаток);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОстатковОбразцов", ТаблицаОстатковОбразцов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОстатков.Колонка_1,
		|	ТаблицаОстатков.Колонка_2,
		|	ТаблицаОстатков.Колонка_3,
		|	ТаблицаОстатков.Колонка_4,
		|	ТаблицаОстатков.Колонка_5,
		|	ТаблицаОстатков.Колонка_6
		|ПОМЕСТИТЬ ВТ_Остаток
		|ИЗ
		|	&ТаблицаОстатковОбразцов КАК ТаблицаОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остаток.Колонка_1 КАК НомерРазрешения,
		|	ВТ_Остаток.Колонка_2 КАК ПорядковыйНомер,
		|	ВТ_Остаток.Колонка_3 КАК НаименованиеОбразца,
		|	ВТ_Остаток.Колонка_4 КАК Квота,
		|	ВТ_Остаток.Колонка_5 КАК Остаток,
		|	ВТ_Остаток.Колонка_6 КАК Тип
		|ИЗ
		|	ВТ_Остаток КАК ВТ_Остаток
		|ИТОГИ ПО
		|	НомерРазрешения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКолонкаНомерРазрешения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НоваяНакладная = Документы.Накладные.СоздатьДокумент();
	НоваяНакладная.Дата = КонецДня(ТекущаяДата());
	
	Пока ВыборкаКолонкаНомерРазрешения.Следующий() Цикл
		
		НайденноеРазрешение = Документы.Разрешения.НайтиПоНомеру(ВыборкаКолонкаНомерРазрешения.НомерРазрешения);
		Если НайденноеРазрешение = ПредопределенноеЗначение("Документ.Разрешения.ПустаяСсылка") Тогда
		   Продолжить;
		КонецЕсли; 
		
		НоваяСтрокаРазрешение = НоваяНакладная.Разрешения.Добавить();
		НоваяСтрокаРазрешение.Разрешение = НайденноеРазрешение;
		НоваяСтрокаРазрешение.PermitNumber = НайденноеРазрешение.Номер;
		
		ДокументРазрешение = НайденноеРазрешение.ПолучитьОбъект();
		
		ВыборкаДетальныеЗаписи = ВыборкаКолонкаНомерРазрешения.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НайденныйОбразец = Справочники.Образцы.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.НаименованиеОбразца);
			Если НайденныйОбразец = ПредопределенноеЗначение("Справочник.Образцы.ПустаяСсылка") Тогда
				НовыйОбразец = Справочники.Образцы.СоздатьЭлемент();
				НовыйОбразец.Наименование = ВыборкаДетальныеЗаписи.НаименованиеОбразца;
				Если ВРег(ВыборкаДетальныеЗаписи.Тип) = "A" Тогда
					НовыйОбразец.ТипОбразца = ПредопределенноеЗначение("Перечисление.ТипыОбразцов.Ambient"); 
				ИначеЕсли ВРег(ВыборкаДетальныеЗаписи.Тип) = "C" Тогда
					НовыйОбразец.ТипОбразца = ПредопределенноеЗначение("Перечисление.ТипыОбразцов.Chilled"); 
				ИначеЕсли ВРег(ВыборкаДетальныеЗаписи.Тип) = "F" Тогда	
					НовыйОбразец.ТипОбразца = ПредопределенноеЗначение("Перечисление.ТипыОбразцов.Frozen");
				КонецЕсли;
				НовыйОбразец.Записать();
				Образец = НовыйОбразец.Ссылка;
			Иначе
				Образец = НайденныйОбразец;
			КонецЕсли; 
			
			РазрешениеНоваяСтрокаОбразец = ДокументРазрешение.Образцы.Вставить(ВыборкаДетальныеЗаписи.ПорядковыйНомер - 1);
			РазрешениеНоваяСтрокаОбразец.Образец = Образец;
			РазрешениеНоваяСтрокаОбразец.ТипОбразца = Образец.ТипОбразца;
			РазрешениеНоваяСтрокаОбразец.Квота = ВыборкаДетальныеЗаписи.Квота;			
			
			НакладнаяНоваяСтрокаОбразец = НоваяНакладная.Образцы.Добавить();
			НакладнаяНоваяСтрокаОбразец.Образец = Образец;
			НакладнаяНоваяСтрокаОбразец.ТипОбразца = Образец.ТипОбразца;
			НакладнаяНоваяСтрокаОбразец.Списание = ВыборкаДетальныеЗаписи.Квота - ВыборкаДетальныеЗаписи.Остаток;
			НакладнаяНоваяСтрокаОбразец.Разрешение = НайденноеРазрешение; 
			
		КонецЦикла;
		
		ДокументРазрешение.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	НоваяНакладная.УстановитьНовыйНомер();
	НоваяНакладная.ОбменДанными.Загрузка = Истина;
	НоваяНакладная.Записать();
	
КонецПроцедуры // ЗагрузитьРазрешения()

// Метод "Microsoft EXCEL.Application".
//
// Параметры:
//      ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением)
//      ИмяНомерЛиста - Имя/Номер выбранного листа файла EXCEL.
//      СтрокаЗаголовка (по умолчанию = 1) - Номер строки EXCEL, в которой расположены заголовки колонок.
//          Не используется.
//      В обработке 1-я строка анализируется для сопоставления колонок EXCEL с реквизитами 1С (справочники, докуметны, регистры).
//      НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из EXCEL.
//      КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из EXCEL.
//          Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся на листе EXCEL.
//      КолвоСтрокEXCEL - Количество строк на листе "ИмяЛиста" EXCEL. Возвращается в вызываемую процедуру.
//
// Возвращаемые значения:
//      ТаблицаРезультат - Результат считывания с листа "ИмяЛиста" EXCEL.
//
Функция ЗагрузитьМетодом_MSEXCEL(Знач ФайлEXCEL, Знач ИмяНомерЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 2, КонСтрока = 0, КолвоСтрокEXCEL = 0)
	Перем ИмяФайлаEXCEL, ИмяЛиста, НомерЛиста;
	Перем EXCELApplication, Book, Sheet;
	Перем ВсегоЛистов, НачальнаяКолонка, НачальнаяСтрока, КонечнаяКолонка, КонечнаяСтрока;
	Перем ДиапазонДанных, СтрокДиапазона, ДиапазонЗаголовка, МассивЗаголовка, МассивЗначений;
	Перем ТекИмя, ПозДоллар, Версия;
	Перем ТаблицаРезультат, МассивИменКолонок, ИмяКолонки, Колонка, Заголовок, НоваяСтрока, нСтроки;

    ИмяФайлаEXCEL = ПолучитьИмяФайлаБезРасширения(ФайлEXCEL);

    // Нумерация MS EXCEL начинается с 1.
	//ИмяЛиста    = ИмяНомерЛиста.ИмяЛиста;
	НомерЛиста  = ИмяНомерЛиста.НомерЛиста;

    Попытка
        // Инициализация основного объекта EXCEL.Application: Открытие соединения.
        EXCELApplication = Новый COMОбъект("EXCEL.Application");
        EXCELApplication.Visible       = Ложь;
        EXCELApplication.DisplayAlerts = Ложь;
    Исключение
        Попытка
            EXCELApplication.Application.Quit();
        Исключение
        КонецПопытки;
        EXCELApplication = Неопределено;
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;  // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;

    // Инициализация дочернего объекта типа Книга EXCEL.
    Book = EXCELApplication.WorkBooks.Open(ФайлEXCEL);
    ВсегоЛистов = Book.Sheets.Count;

	//// Инициализация дочернего объекта Книги типа Лист EXCEL.
	//Если Лев(ИмяЛиста, 1) = "'" И Прав(ИмяЛиста, 1) = "'" Тогда
	//    ИмяЛиста = УдалитьКавычки(ИмяЛиста, "'");
	//КонецЕсли;
	//Если Прав(ИмяЛиста, 1) = "$" Тогда
	//    УдалитьПоследнийСимволВСтроке(ИмяЛиста, 1);
	//КонецЕсли;
	//Sheet = Book.WorkSheets(ИмяЛиста);

	Sheet = Book.WorkSheets(НомерЛиста);
	
    // Определение диапазона данных таблицы EXCEL.
    НачальнаяКолонка    = 1;
	НачальнаяСтрока     = 1;
	КонечнаяКолонка = Sheet.Cells.CurrentRegion.Columns.Count;
	КонечнаяСтрока  = Sheet.Cells.CurrentRegion.Rows.Count;

    // Параметр возвращаемый в вызывающую процедуру.
    КолвоСтрокEXCEL     = КонечнаяСтрока;

    // Проверка заполненности листа.
    Если КолвоСтрокEXCEL <= 1 И КонечнаяКолонка <= 1 Тогда
        КолвоСтрокEXCEL = 0;
        Сообщить(НСтр("ru = '" + НомерЛиста + ": Лист, содержащий 1 строку считаем пустым.'"), СтатусСообщения.Внимание);

        // Завершение работы.
        // Закрытие Объектов.
        Попытка
            Book.Close();
        Исключение
        КонецПопытки;
        Попытка
            EXCELApplication.Application.Quit();
        Исключение
        КонецПопытки;
        EXCELApplication = Неопределено;

        Возврат Новый ТаблицаЗначений;  // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;

    НачальнаяСтрока     = ?(НачСтрока = 0   , НачальнаяСтрока   , НачСтрока);
    КонечнаяСтрока      = ?(КонСтрока = 0   , КонечнаяСтрока    , КонСтрока);

    КонечнаяСтрока      = ?(КонечнаяСтрока > КолвоСтрокEXCEL, КолвоСтрокEXCEL, КонечнаяСтрока);
    НачальнаяСтрока     = ?(НачальнаяСтрока > КолвоСтрокEXCEL, КолвоСтрокEXCEL, НачальнаяСтрока);

    // Диапазон: Считываемые данные.
    ДиапазонДанных = Sheet.Range(Sheet.Cells(НачальнаяСтрока, НачальнаяКолонка), Sheet.Cells(КонечнаяСтрока, КонечнаяКолонка));
    СтрокДиапазона = ДиапазонДанных.Rows.Count;

    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;

    // Формирование колонок результирующей таблицы.

    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
	//ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);

    МассивИменКолонок = Новый Массив;
    Для ит = 1 ПО КонечнаяКолонка Цикл

        ТекИмя = Строка(ит);
        МассивИменКолонок.Добавить(ТекИмя);

        Если ДиапазонДанных.Columns(ит).Hidden Тогда    // Скрытые колонки EXCEL пропустить.
            Продолжить;
        КонецЕсли;

        ИмяКолонки = "Колонка_" + ТекИмя;
        ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);

    КонецЦикла;

	// ТаблицаРезультат: 1-я Строка-Заголовок.
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	//ДиапазонЗаголовка = Sheet.Range(Sheet.Cells(1, НачальнаяКолонка), Sheet.Cells(1, КонечнаяКолонка));
	//МассивЗаголовка = ДиапазонЗаголовка.Value.Выгрузить();

	//НоваяСтрока = ТаблицаРезультат.Добавить();
	//НоваяСтрока.НомерСтроки = 1;

	//ит = -1;
	//Для Каждого МассивЗначений ИЗ МассивЗаголовка Цикл

	//    Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
	//        ит = ит + 1;

	//        ИмяКолонки = "Колонка_" + МассивИменКолонок[ит];
	//        Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	//        Если Колонка = Неопределено Тогда   // Имена скрытых колонок отсутствуют в массиве.
	//            Продолжить;
	//        КонецЕсли;

	//        НоваяСтрока[ИмяКолонки] = СокрЛП(ЭлементМассива);
	//    КонецЦикла;

	//КонецЦикла;

    // ТаблицаРезультат: формирование строк по указанному диапазону: НачСтрока - КонСтрока.

    ДиапазонДанных = ДиапазонДанных.Value;

    нСтроки = НачальнаяСтрока-1;
    Для НомерСтроки = 1 ПО СтрокДиапазона Цикл

		нСтроки = нСтроки + 1;
        НоваяСтрока = ТаблицаРезультат.Добавить();
		//НоваяСтрока.НомерСтроки = нСтроки;

        Для НомерКолонки = 1 ПО КонечнаяКолонка Цикл

            ИмяКолонки = "Колонка_" + МассивИменКолонок[НомерКолонки-1];
            Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
            Если Колонка = Неопределено Тогда   // Имена скрытых колонок отсутствуют в массиве.
                Продолжить;
            КонецЕсли;

            ЗначениеЯчейки = ДиапазонДанных.GetValue(НомерКолонки, НомерСтроки);            // Считывание данных в соответствии с их типом.

            Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда

                // Ширина колонки используется при формировании таблицы на форме обработки.
                ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
                ДлинаСтроки = СтрДлина(СокрЛП(ЗначениеЯчейки));
                ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);

                НоваяСтрока[ИмяКолонки] = СокрЛП(ЗначениеЯчейки);

            КонецЕсли;

        КонецЦикла;

    КонецЦикла;

    УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);

    // Завершение работы.
    // Закрытие Объектов.
    Попытка
        Book.Close();
    Исключение
    КонецПопытки;
    Попытка
        EXCELApplication.Application.Quit();
    Исключение
    КонецПопытки;
    EXCELApplication = Неопределено;

    Возврат ТаблицаРезультат;

КонецФункции

Процедура УдалитьКолонкиСНулевойШириной(ТаблицаРезультат)
    Перем МассивПустыхКолонок;

    // Найдем пустые колонки.
    МассивПустыхКолонок = Новый Массив;
    Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
        Если Колонка.Ширина = 0 Тогда
            МассивПустыхКолонок.Добавить(Колонка.Имя);
        КонецЕсли;
    КонецЦикла;

    // Удалим пустые колонки.
    Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
        ТаблицаРезультат.Колонки.Удалить(ПустаяКолонка);
    КонецЦикла;

КонецПроцедуры

// Выделяет из полного имени файла имя файла без расширения.
//
// Параметры
//  ПолноеИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   ИмяФайлаБезРасширения – короткое имя файла.
//
Функция ПолучитьИмяФайлаБезРасширения(ПолноеИмяФайла)
    Перем ФайлТМП, РасширениеФайла, ИмяФайлаБезРасширения;

    ФайлТМП = РазложитьСтрокуВМассивПодстрок(ПолноеИмяФайла, "\");
    ФайлТМП = ФайлТМП[ФайлТМП.Количество()-1];
    РасширениеФайла  = "." + ПолучитьРасширениеИмениФайла(ФайлТМП);
    ИмяФайлаБезРасширения = СтрЗаменить(ФайлТМП, РасширениеФайла, "");

    Возврат ИмяФайлаБезРасширения;

КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла)
    Перем Расширение;

    Расширение = ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, ".");
    Возврат Расширение;

КонецФункции

// Удаляет кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
//
Функция УдалитьКавычки(Знач Строка, Кавычка = """")

    Пока Лев(Строка, 1) = Кавычка Цикл
        Строка = Сред(Строка, 2);
    КонецЦикла;

    Пока Прав(Строка, 1) = Кавычка Цикл
        Строка = Лев(Строка, СтрДлина(Строка) - 1);
    КонецЦикла;

    Возврат Строка;

КонецФункции

// Удаляет из строки указанное количество символов справа.
//
// Параметры:
//  Текст         - Строка - строка, в которой необходимо удалить последние символы;
//  ЧислоСимволов - Число  - количество удаляемых символов.
//
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)

    Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);

КонецПроцедуры

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")

    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока 1 = 1 Цикл
            Поз = Найти(Стр, Разделитель);
            Если Поз = 0 Тогда
                МассивСтрок.Добавить(СокрЛП(Стр));
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(СокрЛП(Лев(Стр, Поз - 1)));
            Стр = СокрЛ(Сред(Стр, Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока 1 = 1 Цикл
            Поз = Найти(Стр, Разделитель);
            Если Поз = 0 Тогда
                Если (СокрЛП(Стр) <> "") Тогда
                    МассивСтрок.Добавить(СокрЛП(Стр));
                КонецЕсли;
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(СокрЛП(Лев(Стр,Поз - 1)));
            Стр = Сред(Стр, Поз + ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;

КонецФункции

// Функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)

    ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
    Пока ПозицияСимвола >= 1 Цикл
        Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
            Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1);
        КонецЕсли;
        ПозицияСимвола = ПозицияСимвола - 1;
    КонецЦикла;

    Возврат "";

КонецФункции


