
#Область ПроцедурыИФункцииРаботыСШтрихкодами

// Определить тип штрихкода по значению.
//
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	ТипШтрихкодаВрем = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаВрем = "EAN8" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
	ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
	ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
	ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции

// Функция возвращает результат проверки полученного штрихкода на предмет уникальности в информационной базе.
//
// Параметры:
// ШКод - Строка - проверяемый штрихкод.
// ТипШК - ПланВидовХарактеристикСсылка.ТипыШтрихкодов - тип штрихкода.
//
// ВозвращаемоеЗначение:
// Булево - результат проверки.
//
Функция ПроверитьУникальностьШтрихкода(ШКод, ДокументИмя, ТипШК = Неопределено) Экспорт
	
	Уникальность = Истина;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Документ.Номер
	               |ИЗ
	               |	Документ." + ДокументИмя + " КАК Документ
	               |ГДЕ
	               |	Документ.Номер = &ШКод";
	
	Запрос.УстановитьПараметр("ШКод", ШКод);
	
	Если Запрос.Выполнить().Выгрузить().Количество() > 1 Тогда
		Уникальность = Ложь;
	КонецЕсли;
	
	Возврат Уникальность;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция возвращает результат проверки общей структуры адресов электронной почты клиента
// на корректность записи.
//
// Параметры:
// АдресЭП - Строка - адрес или несколько адресов электронной почты.
//
// Возвращаемое значение:
// Результат - Булево - результат проверки.
//
Функция ПроверитьКорректностьЗаписиАдресаЭлектроннойПочты(АдресЭП) Экспорт
	
	Результат = Истина;
	Если НЕ ПустаяСтрока(АдресЭП) Тогда
		
		ЧислоАдресов = СтрЧислоВхождений(АдресЭП,"@");
		Если ЧислоАдресов = 0 Тогда
			
			Результат = Ложь;
			
		Иначе
			
			Для к = 1 По ЧислоАдресов Цикл
				
				АТ = Найти(АдресЭП, "@");
				
				ИмяПользователя = Лев(АдресЭП,АТ-1);
				
				Если (ПустаяСтрока(ИмяПользователя) ИЛИ Найти(ИмяПользователя," ") <> 0) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				АдресЭП = Сред(АдресЭП, АТ+1);
				Разделитель = НайтиРазделительАдресов(АдресЭП);
				Если Разделитель = СтрДлина(АдресЭП) Тогда
					Домен = Лев(АдресЭП,Разделитель);
				Иначе
					Домен = Лев(АдресЭП,Разделитель-1);
				КонецЕсли;
				
				Если (ПустаяСтрока(Домен) ИЛИ Найти(Домен," ") <> 0) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				ЧислоТочек = СтрЧислоВхождений(Домен,".");
				
				Если НЕ (ЧислоТочек > 0 И ЧислоТочек <=2) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				АдресЭП = СокрЛ(Сред(АдресЭП,Разделитель+1));
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Функция возвращает позицию символа, разделяющего два соседних адреса электронной почты,
// записанных в одной строке.
//
// Параметры:
// Стр - Строка - строка с адресам электронной почты.
//
// Возвращаемое значение:
// Результат - Число - позиция разделителя.
//
Функция НайтиРазделительАдресов(Стр)
	
	Результат = Найти(Стр," ");
	Если Результат = 0 Тогда
		Результат = Найти(Стр,",");
	КонецЕсли;
	Если Результат = 0 Тогда
		Результат = Найти(Стр,";");
	КонецЕсли;
	Если Результат = 0 Тогда
		Результат = СтрДлина(Стр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает ф.о "Использовать подключаемое оборудование".
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользованиеПодключаемогоОборудования");
	
КонецФункции

#КонецОбласти
