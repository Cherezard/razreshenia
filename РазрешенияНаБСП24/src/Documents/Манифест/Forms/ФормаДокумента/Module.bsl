
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Функция ПолучитьДополнительныеПараметры(Фильтр = "")
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	ДополнительныеПараметры.Вставить("Заголовок", Строка(Объект.Ссылка));
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДиалогВыбораФайла()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла		= "";
	ДиалогОткрытияФайла.Фильтр				= Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор	= ложь;
	ДиалогОткрытияФайла.Заголовок			= НСтр("ru = 'Выберите файлы'");
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ВыборкаВнешнегоФайлаЗагрузки", ЭтотОбъект, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));

КонецПроцедуры

&НаКлиенте
Процедура ВыборкаВнешнегоФайлаЗагрузки(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ВыбранныйФайл = ИмяФайла;
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл не найден!'; en = 'File not found!'"));
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ВыбранныйФайл);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаФайлаВыборки", ЭтотОбъект, Новый Структура("Файл", Файл)));

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаФайлаВыборки(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	Если Не Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл не найден!'; en = 'File not found!'"));
		Возврат;
	КонецЕсли; 
	Файл = "";	
	
	ЗагрузитьДанныеВХранилище(СокрЛП(ВыбранныйФайл));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВХранилище(ВыбранныйФайл)
	
	ФайлВХранилище = Новый ДвоичныеДанные(ВыбранныйФайл);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВХранилище, ЭтотОбъект.УникальныйИдентификатор);	
	
	ФорматФайла = "";
	Если Найти(ВыбранныйФайл, "xlsx") > 0 Тогда 
		ФорматФайла = "xlsx";
	Иначе
		ФорматФайла = "xls";
	КонецЕсли;

	Попытка    
		ЗагрузитьИзВнешнегоФайлаНаСервере(АдресВоВременномХранилище, ФорматФайла);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнена загрузка из внешнего файла");  
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОтправленияПослеЗакрытияВопроса(Результат, Параметры) Экспорт 		
	
	Если Результат.Значение = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьДиалогВыбораФайла();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийКурсВалюты(Знач Валюта)
	
	ТекущийКурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Объект.Дата);
	
	Возврат ТекущийКурсВалюты;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
	    Объект.ОтветственноеЛицо = Пользователи.ТекущийПользователь();	
	КонецЕсли; 
	
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(Объект.НомерРеестра) Тогда
		ТекстПредупреждения = "Проверьте дату документа";
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.Манифест.Форма.ФормаСотриторвкиПоШтрихкоду" Тогда
		
		ОбработкаВыбораСотрировкаНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиОтправления

&НаКлиенте
Процедура ОтправленияВалютаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Отправления.ТекущиеДанные;
	КурсВалюты = ПолучитьТекущийКурсВалюты(ТекущаяСтрока.Валюта);
	
	ТекущаяСтрока.Курс = КурсВалюты.Курс;
	ТекущаяСтрока.ТаможеннаяСтоимость = ТекущаяСтрока.ФактурнаяСтоимость * КурсВалюты.Курс;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзВнешнегоФайлаНаСервере(АдресВоВременномХранилище, ФорматФайла)
	
	Если ФорматФайла <> "" Тогда
		ЗагрузитьИзФайлаExcel(АдресВоВременномХранилище, ФорматФайла);
	Иначе	
		ЗагрузитьИзФайлаБезФормата(АдресВоВременномХранилище);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаБезФормата(АдресВоВременномХранилище)
	
	Объект.Отправления.Очистить();
	ВременнаяТаблица = Объект.Отправления.Выгрузить();
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла();
	ФайлВХранилище = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ФайлВХранилище.Записать(ИмяТемпФайла);
	
	ПрочитанныйТекст = Новый ЧтениеТекста(ИмяТемпФайла);
	СтрокаТекстовогоФайла = ПрочитанныйТекст.ПрочитатьСтроку(Символы.ПС);
	
	Пока СтрокаТекстовогоФайла <> Неопределено Цикл
		
		СтрокаТекста = СокрЛП(СтрокаТекстовогоФайла);
		
		СимвольныйКод = СокрЛП(Сред(СтрокаТекста, 285, 3));
		Валюта = Справочники.Валюты.НайтиПоНаименованию(СимвольныйКод, Истина);
		ТекущийКурсВалюты = ПолучитьТекущийКурсВалюты(Валюта);
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		
		СтруктрураДанныхНакладной = ПолучитьДанныеНакладной(СокрЛП(Сред(СтрокаТекста, 6, 9)), Объект.Дата);
		Если СтруктрураДанныхНакладной.Свойство("НакладнаяСсылка") Тогда
			НоваяСтрока.Накладная	= СтруктрураДанныхНакладной.НакладнаяСсылка;
			НоваяСтрока.Количество	= СтруктрураДанныхНакладной.ОбщееКоличествоСписания;
		КонецЕсли; 
		
		НоваяСтрока.Валюта				= ТекущийКурсВалюты.Валюта;
		НоваяСтрока.Курс				= ТекущийКурсВалюты.Курс;
		НоваяСтрока.Грузоотправитель	= СокрЛП(Сред(СтрокаТекста, 1485, 30)) + " " + СокрЛП(Сред(СтрокаТекста, 1369, 22));
		НоваяСтрока.Грузополучатель		= СокрЛП(Сред(СтрокаТекста, 1812, 30))+ " " + СокрЛП(Сред(СтрокаТекста, 1696, 22)) + " " + СокрЛП(Сред(СтрокаТекста, 1732, 30));
		НоваяСтрока.ВесБрутто			= Число(СокрЛП(Сред(СтрокаТекста, 1187, 8)))/1000;
		НоваяСтрока.ВесНетто			= НоваяСтрока.ВесБрутто * 0.9;
		НоваяСтрока.ФактурнаяСтоимость	= Число(СокрЛП(Сред(СтрокаТекста, 255, 13)))/100;
		НоваяСтрока.ТаможеннаяСтоимость	= НоваяСтрока.ФактурнаяСтоимость * НоваяСтрока.Курс;
		
		СтрокаТекстовогоФайла = ПрочитанныйТекст.ПрочитатьСтроку(Символы.ПС);
		
	КонецЦикла;
	
	ПрочитанныйТекст.Закрыть();
	УдалитьФайлы(ИмяТемпФайла);
	
	Объект.Отправления.Загрузить(ВременнаяТаблица);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаExcel(АдресВоВременномХранилище, ФорматФайла)
	
	Объект.Отправления.Очистить();
	ВременнаяТаблица = Объект.Отправления.Выгрузить();
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла(ФорматФайла);
	ФайлВХранилище = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ФайлВХранилище.Записать(ИмяТемпФайла);
	
	КолонкаНомерНакладной		= 2;
	КолонкаГрузоотправитель		= 4;
	КолонкаГрузополучатель		= 5;
	КолонкаКоличество			= 8;
	КолонкаБруттоНетто			= 9;
	КолонкаФактурнаяСтоимость	= 10;
	КолонкаТаможеннаяСтоимость	= 11;  	
	
	СтрокаЧтения = 24;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяТемпФайла);
	ПродолжитьЧтение = Истина;	
	
	Пока ПродолжитьЧтение Цикл
		
		НомерНакладной = СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаНомерНакладной).Текст);
		Если НомерНакладной = "" Тогда
			ПродолжитьЧтение = Ложь;
			Прервать;		
		КонецЕсли; 
		
		МассивВалюта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаФактурнаяСтоимость).Текст), " ",, Истина);

		Валюта = Справочники.Валюты.НайтиПоНаименованию(Строка(МассивВалюта[1]), Истина);
		ТекущийКурсВалюты = ПолучитьТекущийКурсВалюты(Валюта);

		МассивВес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаБруттоНетто).Текст), "/",, Истина);
		НоваяСтрока = ВременнаяТаблица.Добавить();
		
		СтруктрураДанныхНакладной = ПолучитьДанныеНакладной(НомерНакладной, Объект.Дата);
		Если СтруктрураДанныхНакладной.Свойство("НакладнаяСсылка") Тогда
			НоваяСтрока.Накладная = СтруктрураДанныхНакладной.НакладнаяСсылка;
		КонецЕсли; 
		
		Количество = ОбщегоНазначенияКлиентСервер.УбратьЛишниеСимволы(СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаКоличество).Текст), "0123456789");
		
		НоваяСтрока.Количество			= Число(Количество);
		НоваяСтрока.Валюта				= ТекущийКурсВалюты.Валюта;
		НоваяСтрока.Курс				= ТекущийКурсВалюты.Курс;
		НоваяСтрока.Грузоотправитель	= СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаГрузоотправитель).Текст);
		НоваяСтрока.Грузополучатель		= СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаГрузополучатель).Текст);
		НоваяСтрока.ВесБрутто			= Число(МассивВес[0]);
		НоваяСтрока.ВесНетто			= Число(МассивВес[1]);
		НоваяСтрока.ФактурнаяСтоимость	= Число(МассивВалюта[0]);
		НоваяСтрока.ТаможеннаяСтоимость	= СокрЛП(ТабличныйДокумент.Область(СтрокаЧтения,КолонкаТаможеннаяСтоимость).Текст);
		
		СтрокаЧтения = СтрокаЧтения + 1;
		
	КонецЦикла; 
	
	УдалитьФайлы(ИмяТемпФайла);
	
	Объект.Отправления.Загрузить(ВременнаяТаблица);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНакладной(НомерНакладной, Знач Дата)
	
	СтуктураДанныхНоменклатуры = Новый Структура;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", НомерНакладной);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладныеОбразцы.Ссылка,
	               |	СУММА(НакладныеОбразцы.Списание) КАК Списание
	               |ИЗ
	               |	Документ.Накладные.Образцы КАК НакладныеОбразцы
	               |ГДЕ
	               |	НакладныеОбразцы.Ссылка.Номер = &Номер
	               |	И НакладныеОбразцы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), ДЕНЬ, -30) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НакладныеОбразцы.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтуктураДанныхНоменклатуры.Вставить("НакладнаяСсылка", Выборка.Ссылка);
		СтуктураДанныхНоменклатуры.Вставить("ОбщееКоличествоСписания", Выборка.Списание);
	КонецЕсли;
	
	Возврат СтуктураДанныхНоменклатуры;	
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандыТабличнойЧастиОтправления

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Объект.Отправления.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОчиститьНаСервере", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, "Очистить табличную часть ""Отправления""?", РежимДиалогаВопрос.ДаНет, ПолучитьДополнительныеПараметры()); 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	Фильтр = НСтр("ru = 'Текстовый файл'; en = 'Text file'") + "(*.*)|*.*";
	Если Объект.Отправления.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправленияПослеЗакрытияВопроса", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, "Очистить табличную часть ""Отправления""?", РежимДиалогаВопрос.ДаНет, ПолучитьДополнительныеПараметры()); 
	Иначе		
		ОткрытьДиалогВыбораФайла();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)

	Фильтр = НСтр("ru = 'Книга Excel 97-2003'; en = 'Excel Book 97-2003'") + "(*.xls)|*.xls" + "|" + НСтр("ru = 'Книга Excel'; en = 'Excel Book'") + "(*.xlsx)|*.xlsx";
	Если Объект.Отправления.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправленияПослеЗакрытияВопроса", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, "Очистить табличную часть ""Отправления""?", РежимДиалогаВопрос.ДаНет, ПолучитьДополнительныеПараметры()); 
	Иначе
		ОткрытьДиалогВыбораФайла();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСортировкуПоШтрихкодам(Команда)

	Если Объект.Отправления.Количество() = 0 Тогда
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для сортировки'"),,"Объект.Отправления");
		Возврат;
	КонецЕсли; 

	ПараметрЗаголовок = НСтр("ru = 'Сортировка отправлений в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='манифесте'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",	ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Документ",		Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресКопииОтправления", АдресКопииОтправленийВХранилище(УникальныйИдентификатор));
	
	ОткрытьФорму("Документ.Манифест.Форма.ФормаСотриторвкиПоШтрихкоду", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработкаВыбораСотрировкаНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораСотрировкаНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСотрировкаНаСервере(ВыбранноеЗначение)
	
	НоваяТаблицаОтправлений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОтправленийВХранилище);
	Объект.Отправления.Очистить();
	Объект.Отправления.Загрузить(НоваяТаблицаОтправлений);
	
КонецПроцедуры

&НаСервере
Функция АдресКопииОтправленийВХранилище(УникальныйИдентификаторВладельца)

	АдресВХранилище = Неопределено;
	
	Отправления = Объект.Отправления.Выгрузить();
	АдресВХранилище = ПоместитьВоВременноеХранилище(Отправления, УникальныйИдентификаторВладельца);
	
	Возврат АдресВХранилище;
	
КонецФункции  

&НаСервере
Процедура ОчиститьНаСервере()
	
	Объект.Отправления.Очистить();	
	
КонецПроцедуры

#КонецОбласти






