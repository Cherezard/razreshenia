#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
		
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//Остатки по разрешению
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОстаткиПоРазрешению";
	КомандаПечати.Представление = НСтр("ru = 'Остатки по разрешению'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//Остатки по разрешению с факсимиле
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОстаткиПоРазрешению";
	КомандаПечати.Представление = НСтр("ru = 'Остатки по разрешению(с факсимиле)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
	
	//Отчет для таможни
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетДляТаможни";
	КомандаПечати.Представление = НСтр("ru = 'Отчет для таможни'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	//Реестр экспресс грузов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик	= "УправлениеПечатьюКлиентРазрешения.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеестрЭкспрессГрузов";
	КомандаПечати.Идентификатор = "РеестрЭкспрессГрузов";
	КомандаПечати.Представление = НСтр("ru = 'Реестр экспресс грузов(с факсимиле)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОстаткиПоРазрешению") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОстаткиПоРазрешению", НСтр("ru = 'Остатки по разрешению'"), СформироватьПечатнуюФормуОстаткиПоРазрешению(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетДляТаможни") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетДляТаможни", НСтр("ru = 'Отчет для таможни'"), СформироватьПечатнуюФормуОтчетДляТаможни(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;

КонецПроцедуры

// Функция получает данные для формирования печатной формы "Счет на оплату"
//
// Параметры:
//	ПараметрыПечати - Структура
//	МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные
//
// Возвращаемое значение:
//	Структура - Структура с полями: "РезультатПоШапке", "РезультатПоЭтапамОплаты", "РезультатПоТабличнойЧасти"
//
Функция ПолучитьДанныеДляПечатнойФормыРеестрЭкспрессГрузов(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормРеестрЭкспрессГрузов(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПечатныхФормРеестрЭкспрессГрузов(ПараметрыПечати, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов[0]);
	Запрос.УстановитьПараметр("Период", ПараметрыПечати.Период); 
	Запрос.УстановитьПараметр("ТаможенныйПост", ПараметрыПечати.ТаможенныйПост); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	Манифест.Ссылка
	               |ПОМЕСТИТЬ ВТ_Манифест
	               |ИЗ
	               |	Документ.Манифест КАК Манифест
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(Манифест.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |	И Манифест.ТаможенныйПост = &ТаможенныйПост
	               |	И НЕ Манифест.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Накладные.Ссылка
	               |ПОМЕСТИТЬ ВТ_Накладные
	               |ИЗ
	               |	ВТ_Манифест КАК ВТ_Манифест
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Манифест.Отправления КАК МанифестОтправления
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Накладные КАК Накладные
	               |			ПО МанифестОтправления.Накладная = Накладные.Ссылка
	               |		ПО ВТ_Манифест.Ссылка = МанифестОтправления.Ссылка
	               |ГДЕ
	               |	Накладные.Разрешения.Разрешение В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Манифест.Ссылка КАК ДокументСсылка,
	               |	Манифест.Номер,
	               |	Манифест.Дата,
	               |	Манифест.НомерРеестра,
	               |	Манифест.ПодробноеОписаниеОбразцов,
	               |	ТаможенныеПосты.НаименованиеПолное КАК ТаможенныйПост,
	               |	ТаможенныеПосты.Код КАК КодПоста,
	               |	ТаможенныеПосты.КодЭкспрессГруза,
	               |	ФизическиеЛица.Наименование КАК СотрудникТаможни,
	               |	ФизическиеЛица.СерияДокумента КАК СерияПаспорта,
	               |	ФизическиеЛица.НомерДокумента КАК НомерПаспорта,
	               |	ФизическиеЛица.ДатаВыдачиДокумента КАК ДатаВыдачиПаспорта,
	               |	Доверенности.Наименование КАК ДоверенностьСотрудникаТаможни
	               |ИЗ
	               |	ВТ_Манифест КАК ВТ_Манифест
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Манифест КАК Манифест
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Доверенности КАК Доверенности
	               |				ПО ФизическиеЛица.Ссылка = Доверенности.Владелец
	               |			ПО Манифест.СотрудникТаможни = ФизическиеЛица.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТаможенныеПосты КАК ТаможенныеПосты
	               |			ПО Манифест.ТаможенныйПост = ТаможенныеПосты.Ссылка
	               |		ПО ВТ_Манифест.Ссылка = Манифест.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументСсылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МанифестОтправления.Ссылка КАК ДокументСсылка,
	               |	МанифестОтправления.Накладная КАК Накладная,
	               |	МанифестОтправления.Накладная.Номер КАК ИндивНомерНакладной,
	               |	МанифестОтправления.Грузоотправитель,
	               |	МанифестОтправления.Грузополучатель,
	               |	МанифестОтправления.Количество КАК КоличествоГруза,
	               |	МанифестОтправления.ВесБрутто,
	               |	МанифестОтправления.ВесНетто,
	               |	МанифестОтправления.ФактурнаяСтоимость,
	               |	МанифестОтправления.ТаможеннаяСтоимость,
	               |	МанифестОтправления.Валюта.Представление КАК Валюта
	               |ИЗ
	               |	Документ.Манифест.Отправления КАК МанифестОтправления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Накладные КАК ВТ_Накладные
	               |		ПО (ВТ_Накладные.Ссылка = МанифестОтправления.Накладная)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Манифест КАК ВТ_Манифест
	               |		ПО МанифестОтправления.Ссылка = ВТ_Манифест.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументСсылка,
	               |	МанифестОтправления.НомерСтроки,
	               |	Накладная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МанифестОтправления.Ссылка КАК ДокументСсылка,
	               |	НакладныеОбразцы.Ссылка КАК Накладная,
	               |	ВЫБОР
	               |		КОГДА МанифестОтправления.Ссылка.ПодробноеОписаниеОбразцов
	               |			ТОГДА НакладныеОбразцы.Образец
	               |		ИНАЧЕ ""Биообразцы в рамках клинических исследований""
	               |	КОНЕЦ КАК Образец,
	               |	НакладныеОбразцы.Разрешение,
	               |	СУММА(НакладныеОбразцы.Списание) КАК Списание,
	               |	СУММА(ОстаткиПоКвотеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |ИЗ
	               |	ВТ_Накладные КАК ВТ_Накладные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Накладные.Образцы КАК НакладныеОбразцы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоКвоте.Остатки(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ) КАК ОстаткиПоКвотеОстатки
	               |			ПО НакладныеОбразцы.Образец = ОстаткиПоКвотеОстатки.Образец
	               |				И НакладныеОбразцы.ТипОбразца = ОстаткиПоКвотеОстатки.ТипОбразца
	               |				И НакладныеОбразцы.Разрешение = ОстаткиПоКвотеОстатки.Разрешение
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Манифест.Отправления КАК МанифестОтправления
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Манифест КАК ВТ_Манифест
	               |				ПО (ВТ_Манифест.Ссылка = МанифестОтправления.Ссылка)
	               |			ПО НакладныеОбразцы.Ссылка = МанифестОтправления.Накладная
	               |		ПО ВТ_Накладные.Ссылка = НакладныеОбразцы.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НакладныеОбразцы.Ссылка,
	               |	НакладныеОбразцы.Разрешение,
	               |	МанифестОтправления.Ссылка,
	               |	ВЫБОР
	               |		КОГДА МанифестОтправления.Ссылка.ПодробноеОписаниеОбразцов
	               |			ТОГДА НакладныеОбразцы.Образец
	               |		ИНАЧЕ ""Биообразцы в рамках клинических исследований""
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументСсылка,
	               |	Накладная";
				   
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоОтправления", ПакетРезультатовЗапроса[3]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[4]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция СформироватьПечатнуюФормуОстаткиПоРазрешению(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	Разрешения.Ссылка КАК Ссылка,
	              	|	Разрешения.Номер КАК Номер,
	              	|	Разрешения.Дата КАК ДатаДокумента,
	              	|	Разрешения.Issued КАК Issued,
	              	|	Разрешения.StudyNumber КАК Протокол,
	              	|	ПРЕДСТАВЛЕНИЕ(Разрешения.StudyNumber) КАК ПротоколПредставление,
	              	|	Разрешения.Подписант
	              	|ИЗ
	              	|	Документ.Разрешения КАК Разрешения
	              	|ГДЕ
	              	|	Разрешения.Ссылка В(&МассивОбъектов)
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	Ссылка
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	РазрешенияОбразцы.Ссылка КАК Ссылка,
	              	|	РазрешенияОбразцы.НомерСтроки КАК НомерСтроки,
	              	|	РазрешенияОбразцы.Образец КАК Образец,
	              	|	РазрешенияОбразцы.Образец.ПолноеНаименование КАК ОбразецПредставление,
	              	|	РазрешенияОбразцы.Квота КАК Квота,
	              	|	ЕСТЬNULL(ОстаткиПоКвотеОстатки.КоличествоОстаток, 0) КАК Остаток
	              	|ИЗ
	              	|	Документ.Разрешения.Образцы КАК РазрешенияОбразцы
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоКвоте.Остатки(&Период, Разрешение В (&МассивОбъектов)) КАК ОстаткиПоКвотеОстатки
	              	|		ПО РазрешенияОбразцы.Ссылка = ОстаткиПоКвотеОстатки.Разрешение
	              	|			И РазрешенияОбразцы.Образец = ОстаткиПоКвотеОстатки.Образец
	              	|			И РазрешенияОбразцы.ТипОбразца = ОстаткиПоКвотеОстатки.ТипОбразца
	              	|ГДЕ
	              	|	РазрешенияОбразцы.Ссылка В(&МассивОбъектов)
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	Ссылка,
	              	|	НомерСтроки
	              	|ИТОГИ ПО
	              	|	Ссылка";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоОбразцам = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	//Формат
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Разрешения_ОстаткиПоРазрешению";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Разрешения.ПФ_MXL_ОстаткиПоРазрешению");
	
	ОбластьЛоготип		 = Макет.ПолучитьОбласть("Логотип");
	ОбластьШапка		 = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
	ОбластьПропуск	   = Макет.ПолучитьОбласть("Пропуск");
	
	ОтображатьФаксимиле = Ложь;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда
		ОтображатьФаксимиле = ПараметрыПечати.ОтображатьФаксимиле;
	КонецЕсли;

	Если ОтображатьФаксимиле Тогда
		ОбластьПодвал = Макет.ПолучитьОбласть("ОбластьФаксимиле");
	Иначе	
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	КонецЕсли; 
		
	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ОтображатьФаксимиле Тогда
			ТабличныйДокумент.Вывести(ОбластьЛоготип);
		Иначе
			Сч = 0;
			Пока Не Сч = 15 Цикл
				ТабличныйДокумент.Вывести(ОбластьПропуск);
				Сч = Сч + 1;
			КонецЦикла; 
		КонецЕсли; 
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьШапка.Параметры.ДатаТекущая = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"); 
		ОбластьШапка.Параметры.Дата = Формат(ВыборкаПоДокументам.Issued, "ДФ=dd.MM.yyyy"); 
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Вывод строк.
		Если НЕ ВыборкаПоОбразцам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Вывод шапки.
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ВыборкаПоСтрокам = ВыборкаПоОбразцам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
		// Вывод подписей.
		ОбластьПодвал.Параметры.ОсновнаяОрганизация = СокрЛП(Константы.ОсновнаяОрганизация.Получить());
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Подписант) Тогда
			Подписант = ВыборкаПоДокументам.Подписант; 
		Иначе
			Подписант = Справочники.ФизическиеЛица.НайтиПоРеквизиту("Должность", ПредопределенноеЗначение("Справочник.Должности.Руководитель"));
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Подписант = Подписант; 
		ОбластьПодвал.Параметры.ПодписантДолжность = Подписант.Должность.ПолноеНаименование;
		ВывестиФаксимилеВТабличныйДокумент(Макет, ОбластьПодвал, "КартинкаПодпись", Подписант, ОтображатьФаксимиле);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Вывод пропуска.
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ОбластьПропуск);
		МассивВыводимыхОбластей.Добавить(ОбластьИсполнитель);
		
		Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
			ТабличныйДокумент.Вывести(ОбластьПропуск);
		КонецЦикла;
		
		// Вывод исполнителя.
		ТекПользователь = Пользователи.ТекущийПользователь();
		ОбластьИсполнитель.Параметры.Исполнитель = ТекПользователь.Наименование;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		НайденныеСтроки = ТекПользователь.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбластьИсполнитель.Параметры.ТелефонИсполнителя = НайденныеСтроки[0].Представление;
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьИсполнитель);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуОтчетДляТаможни(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	//Формат
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ПервыйДокумент = Истина;
	
	Для каждого ДокументРазрешение Из МассивОбъектов Цикл
				
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьClearance = ТабличныйДокумент.ПолучитьОбласть("R1C1:R2C3");
		ОбластьClearance.Область("R1C1").Текст = ДокументРазрешение.ClearanceДепо;
		ТабличныйДокумент.Вывести(ОбластьClearance);
		
		РезультатОтчета = СформироватьОтчетДляТаможни(ДокументРазрешение);
		
		ТабличныйДокумент.Вывести(РезультатОтчета);
		
		Область = ТабличныйДокумент.НайтиТекст("Параметры");
		Смещать = ТипСмещенияТабличногоДокумента.ПоГоризонтали;
		ТабличныйДокумент.УдалитьОбласть(Область, Смещать);
		
		НоваяОбласть = Новый ТабличныйДокумент;
		ТекстЗаголовка = "Лист исполнения к Разрешению МЗ РФ № " + ДокументРазрешение.Номер + " от " + Формат(ДокументРазрешение.Issued, "ДФ=dd.MM.yyyy");
		
		ТабличныйДокумент.ПолеСверху							= 10;
		ТабличныйДокумент.ПолеСнизу								= 20;
		ТабличныйДокумент.ПолеСправа							= 10;
		ТабличныйДокумент.ПолеСлева								= 10;
		ТабличныйДокумент.Область(2,1,2,2);
		Область.Объединить();
		Область.Текст = ТекстЗаголовка;
		ТабличныйДокумент.Область("R2C1:R2C9").Объединить();
		Область = ТабличныйДокумент.ПолучитьОбласть("R4C1");
		
		НоваяОбласть = Новый ТабличныйДокумент;
		Секция = НоваяОбласть.ПолучитьОбласть("R1C3");
		Секция.Область("R1C3").Текст = "Подпись ___________";
		
		ТабличныйДокумент.Присоединить(Секция,,,);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументРазрешение.Ссылка);
		
	КонецЦикла; 
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьОтчетДляТаможни(ДокументРазрешение)
	
	Схема               = Отчеты.ОтчетДляТаможни.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
	КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;  
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода     = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;    
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема); 
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	Настройки = Схема.НастройкиПоУмолчанию;
	НастройкиРазрешение = Настройки.ПараметрыДанных.Элементы.Найти("Разрешение"); 
	НастройкиРазрешение.Значение = ДокументРазрешение; 
	НастройкиРазрешение.Использование = Истина;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Схема, Настройки);    
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных,,,Истина); 
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Выводит факсимиле в табличный документ, заменяя переданную область картинкой факсимиле.
//
// Параметры:
// 		Макет - Макет - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ИмяРисунка - Строка - Название рисунка
// 		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Содержит ссылку на организацию для получения факсимиле
// 		ОтображатьФаксимиле - Булево - Признак отображения факсимиле
//
Процедура ВывестиФаксимилеВТабличныйДокумент(Макет, ОбластьМакета, ИмяРисунка, ФизическоеЛицо, ОтображатьФаксимиле)
	
	Если НЕ ОтображатьФаксимиле Тогда
		Возврат
	КонецЕсли;
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ФайлФаксимильнаяПодпись");
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Факсимиле для физ.лица не указано. 
			|Укажите файл с факсимиле в карточке физ.лица, раздел ""Настройка печати"".'"));
	КонецЕсли;

	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРисунка, ОбластьМакета.Рисунки) Тогда
		// Картинки Факсимиле в этой области макета нет.
		
		Если Макет.Области.Найти("ОбластьФаксимиле") <> Неопределено Тогда
			
			// Проверить картинку факсимиле в области "ОбластьФаксимиле"
			ОбластьМакетаФаксимиле = Макет.ПолучитьОбласть("ОбластьФаксимиле");
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРисунка, ОбластьМакетаФаксимиле.Рисунки)
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаФаксимиле;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки[ИмяРисунка]);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки[ИмяРисунка].Картинка = Картинка;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбновлениеИнформационнойБазы

Процедура ПерезаполнитьПолеПротокол() Экспорт

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Разрешения.Ссылка
	//               |ИЗ
	//               |	Документ.Разрешения КАК Разрешения";
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий()Цикл
	//	ДокументРазрешение = Выборка.Ссылка.ПолучитьОбъект();
	//	
	//	НайденныйПротокол = Справочники.Протоколы.НайтиПоНаименованию(СокрЛП(ДокументРазрешение.УдалитьStudyNumber), Истина);
	//	Если НайденныйПротокол = ПредопределенноеЗначение("Справочник.Протоколы.ПустаяСсылка") 
	//		ИЛИ НайденныйПротокол = Неопределено Тогда
	//		Протокол = Справочники.Протоколы.СоздатьПотокол(СокрЛП(ДокументРазрешение.УдалитьStudyNumber));
	//	ИначеЕсли ЗначениеЗаполнено(НайденныйПротокол) Тогда
	//		Протокол = НайденныйПротокол; 
	//	КонецЕсли; 
	//			
	//	ДокументРазрешение.StudyNumber = Протокол;
	//	
	//	Попытка
	//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументРазрешение);
	//	Исключение
	//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Перезаполнение реквизита протокол'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки(),);
	//		Прервать;
	//	КонецПопытки;
	//	
	//КонецЦикла;	

КонецПроцедуры

Процедура ПерезаполнитьПолеЛаборатория() Экспорт

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Разрешения.Ссылка КАК ДокументРазрешение 
	//               |ИЗ
	//               |	Документ.Разрешения КАК Разрешения";
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий()Цикл
	//	
	//	НайденнаяЛаборатория = Справочники.ПринимающаяЛаборатория.НайтиПоНаименованию(СокрЛП(Выборка.ДокументРазрешение.ReceiverLAB), Истина);
	//	Если НайденнаяЛаборатория = ПредопределенноеЗначение("Справочник.ПринимающаяЛаборатория.ПустаяСсылка") 
	//		ИЛИ НайденнаяЛаборатория = Неопределено Тогда
	//		Лаборатория = Справочники.ПринимающаяЛаборатория.СоздатьЛабораторию(СокрЛП(Выборка.ДокументРазрешение.ReceiverLAB));
	//	ИначеЕсли ЗначениеЗаполнено(НайденнаяЛаборатория) Тогда
	//		Лаборатория = НайденнаяЛаборатория; 
	//	КонецЕсли; 
	//	
	//	Разрешение = Выборка.ДокументРазрешение.ПолучитьОбъект();
	//	Разрешение.ReceiverLAB = Лаборатория;
	//	
	//	Попытка
	//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Разрешение);
	//	Исключение
	//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Перезаполнение реквизита Receiver(LAB)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки(),);
	//		Прервать;
	//	КонецПопытки;
	//	
	//КонецЦикла;	

КонецПроцедуры

#КонецОбласти
