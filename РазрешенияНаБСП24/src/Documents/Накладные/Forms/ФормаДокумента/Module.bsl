
#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ПроверитьУникальностьНомера(Номер, Дата, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Накладные.Ссылка
	               |ИЗ
	               |	Документ.Накладные КАК Накладные
	               |ГДЕ
	               |	Накладные.Номер = &Номер
	               |	И Накладные.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), ДЕНЬ, -45) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)";
				   
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если Не ВыборкаЗапроса.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно записать накладную с таким номером",,,,Отказ)
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстатки()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбразцов", Объект.Образцы.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладныеОписаниеОбразцов.Разрешение,
	               |	НакладныеОписаниеОбразцов.Образец,
	               |	НакладныеОписаниеОбразцов.ТипОбразца,
	               |	НакладныеОписаниеОбразцов.Списание
	               |ПОМЕСТИТЬ ВТ_СписокОбразцов
	               |ИЗ
	               |	&ТаблицаОбразцов КАК НакладныеОписаниеОбразцов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СписокОбразцов.Разрешение,
	               |	ВТ_СписокОбразцов.Образец,
	               |	ВТ_СписокОбразцов.ТипОбразца,
	               |	ВТ_СписокОбразцов.Списание,
	               |	ОстаткиПоКвотеОстатки.КоличествоОстаток КАК Остаток
	               |ИЗ
	               |	ВТ_СписокОбразцов КАК ВТ_СписокОбразцов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоКвоте.Остатки КАК ОстаткиПоКвотеОстатки
	               |		ПО ВТ_СписокОбразцов.Разрешение = ОстаткиПоКвотеОстатки.Разрешение
	               |			И ВТ_СписокОбразцов.Образец = ОстаткиПоКвотеОстатки.Образец
	               |			И ВТ_СписокОбразцов.ТипОбразца = ОстаткиПоКвотеОстатки.ТипОбразца";
				   
	   ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	   
	   Объект.Образцы.Очистить();
	   Объект.Образцы.Загрузить(ТаблицаРезультат);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуОбразцов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРасширений", Объект.Разрешения.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладныеСписокРазрешений.Разрешение
	               |ПОМЕСТИТЬ ВТ_Расширения
	               |ИЗ
	               |	&ТаблицаРасширений КАК НакладныеСписокРазрешений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Расширения.Разрешение КАК Разрешение,
	               |	РазрешенияОписаниеОбразцов.НомерСтроки КАК НомерСтроки,
	               |	РазрешенияОписаниеОбразцов.Образец,
	               |	РазрешенияОписаниеОбразцов.ТипОбразца,
	               |	ОстаткиПоКвотеОстатки.КоличествоОстаток КАК Остаток
	               |ИЗ
	               |	ВТ_Расширения КАК ВТ_Расширения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Разрешения.Образцы КАК РазрешенияОписаниеОбразцов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоКвоте.Остатки КАК ОстаткиПоКвотеОстатки
	               |			ПО РазрешенияОписаниеОбразцов.Ссылка = ОстаткиПоКвотеОстатки.Разрешение
	               |				И РазрешенияОписаниеОбразцов.Образец = ОстаткиПоКвотеОстатки.Образец
	               |				И РазрешенияОписаниеОбразцов.ТипОбразца = ОстаткиПоКвотеОстатки.ТипОбразца
	               |		ПО ВТ_Расширения.Разрешение = РазрешенияОписаниеОбразцов.Ссылка
	               |ГДЕ
	               |	РазрешенияОписаниеОбразцов.Ссылка.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Разрешение,
	               |	НомерСтроки";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Объект.Образцы.Очистить();
	Объект.Образцы.Загрузить(ТаблицаРезультат);
	
	УсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура СписокРазрешенийРазрешениеПриИзмененииНаСервере(СтруктураДанных)

	СтруктураДанных.Вставить("PermitNr", СтруктураДанных.Разрешение.Номер); 
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеОбразцовОбразецПриИзмененииНаСервере(СтруктураДанных)

	СтруктураДанных.Вставить("ТипОбразца", СтруктураДанных.Образец.ТипОбразца);
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеОбразцовСписаниеПриИзмененииНаСервере(СтруктураДанных)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Образец",			СтруктураДанных.Образец);
	Запрос.УстановитьПараметр("ТипОбразца",			СтруктураДанных.ТипОбразца);
	Запрос.УстановитьПараметр("Разрешение",			СтруктураДанных.Разрешение);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиПоКвотеОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоКвоте.Остатки(
	               |			,
	               |			Образец = &Образец
	               |				И ТипОбразца = &ТипОбразца
	               |				И Разрешение = &Разрешение) КАК ОстаткиПоКвотеОстатки";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураДанных.Вставить("Остаток", Выборка.КоличествоОстаток); 

КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеремДатаВызова = Объект.Дата;
		Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
	    Объект.ОтветственноеЛицо = Пользователи.ТекущийПользователь();	
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеВызовСервера.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаВывоза = НачалоДня(ТекущаяДата());
	КонецЕсли; 
	
	ПеремДатаВызова = Объект.Дата;
		
	РассчитатьОстатки();
	УсловноеОформление();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПроверитьУникальностьНомера(Объект.Номер, Объект.Дата, Отказ);
	КонецЕсли; 
	
	Если Объект.Образцы.Итог("Списание") = 0 Тогда
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно записать документ, так как списание по документу = 0",,,,Отказ)
	КонецЕсли; 
	
	Если НачалоДня(Объект.Дата) <> НачалоДня(ПеремДатаВызова) Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), "Была изменена дата вывоза. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Объект.Ссылка.Пустая() Тогда
				Если Параметр[1] = Неопределено Тогда
					ТекКод = Параметр[0];
				Иначе
					ТекКод = Параметр[1][1];
				КонецЕсли;
				ОбработатьШтрихкоды(ТекКод);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно изменить номер для документа", Объект.Ссылка, "Объект.Номер");
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

&НаСервере
Процедура УсловноеОформление()
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Образцы");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Образцы.Остаток");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = 10;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры 
	
#КонецОбласти  

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ДатаВывозаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) < ДобавитьМесяц(НачалоДня(ПеремДатаВызова), -1) 
		ИЛИ НачалоДня(Объект.Дата) > НачалоДня(ПеремДатаВызова) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно изменить дату");
		Объект.Дата = ПеремДатаВызова;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти  

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиОбразцы

&НаКлиенте
Процедура ОписаниеОбразцовОбразецПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Образцы.ТекущиеДанные;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Образец", СтрокаТабличнойЧасти.Образец);
	
	ОписаниеОбразцовОбразецПриИзмененииНаСервере(СтруктураДанных);
	
	СтрокаТабличнойЧасти.ТипОбразца = СтруктураДанных.ТипОбразца;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОбразцовСписаниеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Образцы.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Образец",		СтрокаТабличнойЧасти.Образец);
	СтруктураДанных.Вставить("ТипОбразца",	СтрокаТабличнойЧасти.ТипОбразца);
	СтруктураДанных.Вставить("Разрешение",	СтрокаТабличнойЧасти.Разрешение);

	ОписаниеОбразцовСписаниеПриИзмененииНаСервере(СтруктураДанных);
		
	СтрокаТабличнойЧасти.Остаток = СтруктураДанных.Остаток - СтрокаТабличнойЧасти.Списание;
	
	УсловноеОформление();
	
КонецПроцедуры
	
#КонецОбласти  

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиРазрешения

&НаКлиенте
Процедура СписокРазрешенийРазрешениеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Разрешения.ТекущиеДанные;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Разрешение", СтрокаТабличнойЧасти.Разрешение);
	
	СписокРазрешенийРазрешениеПриИзмененииНаСервере(СтруктураДанных);
	
	СтрокаТабличнойЧасти.PermitNumber = СтруктураДанных.PermitNr;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРазрешенийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьТаблицуОбразцов();	
	
КонецПроцедуры
	
#КонецОбласти  

#Область ШтрихкодыИОборудование

// Функция обрабатывает полученный штрихкод от сканера штрихкодов на клиенте.
//
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Штрихкод = ОбщегоНазначенияКлиентСервер.УбратьЛишниеСимволы(ДанныеШтрихкодов, "0123456789");
	
	Если Не ПодключаемоеОборудованиеВызовСервера.ПроверитьУникальностьШтрихкода(Штрихкод, "Накладные") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Штрихкод не уникален!");
		Возврат;
	Иначе
		Объект.Номер = Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.БазоваяФункциональность

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

#КонецОбласти

#Область ОбработчикиБиблиотек

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
